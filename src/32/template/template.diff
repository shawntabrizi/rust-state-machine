diff --git a/src/main.rs b/src/main.rs
index 5ebc4c66..d4aa6bff 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,4 +1,5 @@
 mod balances;
+/* TODO: Import the `proof_of_existence` module. */
 mod support;
 mod system;
 
diff --git a/src/proof_of_existence.rs b/src/proof_of_existence.rs
new file mode 100644
index 00000000..87ea242e
--- /dev/null
+++ b/src/proof_of_existence.rs
@@ -0,0 +1,25 @@
+use core::fmt::Debug;
+use std::collections::BTreeMap;
+
+pub trait Config: crate::system::Config {
+	/// The type which represents the content that can be claimed using this pallet.
+	/// Could be the content directly as bytes, or better yet the hash of that content.
+	/// We leave that decision to the runtime developer.
+	type Content: Debug + Ord;
+}
+
+/// This is the Proof of Existence Module.
+/// It is a simple module that allows accounts to claim existence of some data.
+#[derive(Debug)]
+pub struct Pallet<T: Config> {
+	/// A simple storage map from content to the owner of that content.
+	/// Accounts can make multiple different claims, but each claim can only have one owner.
+	/* TODO: Add a field `claims` which is a `BTreeMap` fom `T::Content` to `T::AccountId`. */
+}
+
+impl<T: Config> Pallet<T> {
+	/// Create a new instance of the Proof of Existence Module.
+	pub fn new() -> Self {
+		/* TODO: Return a new instance of the `Pallet` struct. */
+	}
+}
