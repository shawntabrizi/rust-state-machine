diff --git a/src/balances.rs b/src/balances.rs
index 947ad84..42d66d0 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -34,7 +34,10 @@ impl<T: Config> Pallet<T> {
 	pub fn balance(&self, who: &T::AccountId) -> T::Balance {
 		*self.balances.get(who).unwrap_or(&T::Balance::zero())
 	}
+}
 
+/* TODO: Add the `#[macros::call]` attribute right here. */
+impl<T: Config> Pallet<T> {
 	/// Transfer `amount` from one account to another.
 	/// This function verifies that `from` has at least `amount` balance to transfer,
 	/// and that no mathematical overflows occur.
@@ -60,12 +63,14 @@ impl<T: Config> Pallet<T> {
 // A public enum which describes the calls we want to expose to the dispatcher.
 // We should expect that the caller of each call will be provided by the dispatcher,
 // and not included as a parameter of the call.
+/* TODO: Remove `enum Call`, this is being generated automatically by `#[macros::call]`. */
 pub enum Call<T: Config> {
 	Transfer { to: T::AccountId, amount: T::Balance },
 }
 
 /// Implementation of the dispatch logic, mapping from `BalancesCall` to the appropriate underlying
 /// function we want to execute.
+/* TODO: Remove this `Dispatch` impl, this is also being generated by `#[macros::call]`. */
 impl<T: Config> crate::support::Dispatch for Pallet<T> {
 	type Caller = T::AccountId;
 	type Call = Call<T>;
diff --git a/src/main.rs b/src/main.rs
index 58b28e0..474d821 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -125,6 +125,7 @@ fn main() {
 		extrinsics: vec![
 			support::Extrinsic {
 				caller: alice.clone(),
+				/* TODO: Update the enum name to match what is generated with the macro. */
 				call: RuntimeCall::Balances(balances::Call::Transfer {
 					to: bob.clone(),
 					amount: 30,
