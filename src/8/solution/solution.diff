diff --git a/src/balances.rs b/src/balances.rs
index d221761..78f233d 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -34,16 +34,14 @@ impl Pallet {
 		to: String,
 		amount: u128,
 	) -> Result<(), &'static str> {
-		/* TODO:
-			- Get the balance of account `caller`.
-			- Get the balance of account `to`.
+		let caller_balance = self.balance(&caller);
+		let to_balance = self.balance(&to);
 
-			- Use safe math to calculate a `new_caller_balance`.
-			- Use safe math to calculate a `new_to_balance`.
+		let new_caller_balance = caller_balance.checked_sub(amount).ok_or("Not enough funds.")?;
+		let new_to_balance = to_balance.checked_add(amount).ok_or("Overflow")?;
 
-			- Insert the new balance of `caller`.
-			- Insert the new balance of `to`.
-		*/
+		self.balances.insert(caller, new_caller_balance);
+		self.balances.insert(to, new_to_balance);
 
 		Ok(())
 	}
@@ -63,10 +61,21 @@ mod tests {
 
 	#[test]
 	fn transfer_balance() {
-		/* TODO: Create a test that checks the following:
-			- That `alice` cannot transfer funds she does not have.
-			- That `alice` can successfully transfer funds to `bob`.
-			- That the balance of `alice` and `bob` is correctly updated.
-		*/
+		let mut balances = super::Pallet::new();
+
+		assert_eq!(
+			balances.transfer("alice".to_string(), "bob".to_string(), 51),
+			Err("Not enough funds.")
+		);
+
+		balances.set_balance(&"alice".to_string(), 100);
+		assert_eq!(balances.transfer("alice".to_string(), "bob".to_string(), 51), Ok(()));
+		assert_eq!(balances.balance(&"alice".to_string()), 49);
+		assert_eq!(balances.balance(&"bob".to_string()), 51);
+
+		assert_eq!(
+			balances.transfer("alice".to_string(), "bob".to_string(), 51),
+			Err("Not enough funds.")
+		);
 	}
 }
