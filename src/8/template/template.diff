diff --git a/src/balances.rs b/src/balances.rs
index ea4e042..d221761 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -24,6 +24,29 @@ impl Pallet {
 	pub fn balance(&self, who: &String) -> u128 {
 		*self.balances.get(who).unwrap_or(&0)
 	}
+
+	/// Transfer `amount` from one account to another.
+	/// This function verifies that `from` has at least `amount` balance to transfer,
+	/// and that no mathematical overflows occur.
+	pub fn transfer(
+		&mut self,
+		caller: String,
+		to: String,
+		amount: u128,
+	) -> Result<(), &'static str> {
+		/* TODO:
+			- Get the balance of account `caller`.
+			- Get the balance of account `to`.
+
+			- Use safe math to calculate a `new_caller_balance`.
+			- Use safe math to calculate a `new_to_balance`.
+
+			- Insert the new balance of `caller`.
+			- Insert the new balance of `to`.
+		*/
+
+		Ok(())
+	}
 }
 
 #[cfg(test)]
@@ -37,4 +60,13 @@ mod tests {
 		assert_eq!(balances.balance(&"alice".to_string()), 100);
 		assert_eq!(balances.balance(&"bob".to_string()), 0);
 	}
+
+	#[test]
+	fn transfer_balance() {
+		/* TODO: Create a test that checks the following:
+			- That `alice` cannot transfer funds she does not have.
+			- That `alice` can successfully transfer funds to `bob`.
+			- That the balance of `alice` and `bob` is correctly updated.
+		*/
+	}
 }
