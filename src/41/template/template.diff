diff --git a/src/main.rs b/src/main.rs
index d854a551..175378a1 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -21,6 +21,7 @@ mod types {
 
 // These are all the calls which are exposed to the world.
 // Note that it is just an accumulation of the calls exposed by each module.
+/* TODO: Remove the `RuntimeCall`. This is now generated by the `#[macros::runtime]`. */
 pub enum RuntimeCall {
 	Balances(balances::Call<Runtime>),
 	ProofOfExistence(proof_of_existence::Call<Runtime>),
@@ -28,6 +29,7 @@ pub enum RuntimeCall {
 
 // This is our main Runtime.
 // It accumulates all of the different pallets we want to use.
+/* TODO: Add the `#[macros::runtime]` attribute here and remove duplicate code listed by TODOs. */
 #[derive(Debug)]
 pub struct Runtime {
 	system: system::Pallet<Self>,
@@ -49,6 +51,7 @@ impl proof_of_existence::Config for Runtime {
 	type Content = types::Content;
 }
 
+/* TODO: Remove all this. It is now generated by the `#[macros::runtime]` attribute. */
 impl Runtime {
 	// Create a new instance of the main Runtime, by creating a new instance of each pallet.
 	fn new() -> Self {
@@ -80,6 +83,7 @@ impl Runtime {
 	}
 }
 
+/* TODO: Remove all this too. Dispatch logic is auto-generated. */
 impl crate::support::Dispatch for Runtime {
 	type Caller = <Runtime as system::Config>::AccountId;
 	type Call = RuntimeCall;
@@ -107,6 +111,7 @@ impl crate::support::Dispatch for Runtime {
 	}
 }
 
+/* TODO: Update the extrinsics to match the automatically generated `RuntimeCall`. */
 fn main() {
 	// Create a new instance of the Runtime.
 	// It will instantiate with it all the modules it uses.
