diff --git a/src/main.rs b/src/main.rs
index f26475b..5eb2944 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -16,12 +16,14 @@ mod types {
 	pub type Extrinsic = crate::support::Extrinsic<AccountId, crate::RuntimeCall>;
 	pub type Header = crate::support::Header<BlockNumber>;
 	pub type Block = crate::support::Block<Header, Extrinsic>;
+	/* TODO: Add the concrete `Content` type for your runtime. */
 }
 
 // These are all the calls which are exposed to the world.
 // Note that it is just an accumulation of the calls exposed by each module.
 pub enum RuntimeCall {
 	Balances(balances::Call<Runtime>),
+	/* TODO: Add a `ProofOfExistence` variant to access `proof_of_existence::Call`. */
 }
 
 // This is our main Runtime.
@@ -30,6 +32,7 @@ pub enum RuntimeCall {
 pub struct Runtime {
 	system: system::Pallet<Self>,
 	balances: balances::Pallet<Self>,
+	/* TODO: Add `proof_of_existence` field to your `Runtime`. */
 }
 
 impl system::Config for Runtime {
@@ -42,10 +45,16 @@ impl balances::Config for Runtime {
 	type Balance = types::Balance;
 }
 
+/* TODO: Implement proof_of_existence::Config` for `Runtime`. */
+
 impl Runtime {
 	// Create a new instance of the main Runtime, by creating a new instance of each pallet.
 	fn new() -> Self {
-		Self { system: system::Pallet::new(), balances: balances::Pallet::new() }
+		Self {
+			system: system::Pallet::new(),
+			balances: balances::Pallet::new(),
+			/* TODO: Initialize the `proof_of_existence` pallet. */
+		}
 	}
 
 	// Execute a block of extrinsics. Increments the block number.
@@ -88,6 +97,7 @@ impl crate::support::Dispatch for Runtime {
 			RuntimeCall::Balances(call) => {
 				self.balances.dispatch(caller, call)?;
 			},
+			/* TODO: Dispatch `calls` to the `ProofOfExistence` pallet. */
 		}
 		Ok(())
 	}
