diff --git a/src/main.rs b/src/main.rs
index 033f8e9..ef898a4 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -103,31 +103,25 @@ fn main() {
 	// Initialize the system with some initial balance.
 	runtime.balances.set_balance(&alice, 100);
 
-	// start emulating a block
-	runtime.system.inc_block_number();
-	assert_eq!(runtime.system.block_number(), 1);
-
-	// first transaction
-	runtime.system.inc_nonce(&alice);
-	let _res = runtime.balances.transfer(alice.clone(), bob, 30).map_err(|e| eprintln!("{e}"));
-
-	// second transaction
-	runtime.system.inc_nonce(&alice);
-	let _res = runtime.balances.transfer(alice, charlie, 20).map_err(|e| eprintln!("{e}"));
-
-	/*
-		TODO: Replace the logic above with a new `Block`.
-			- Set the block number to 1 in the `Header`.
-			- Move your existing transactions into extrinsic format, using the
-			  `Extrinsic` and `RuntimeCall`.
-	*/
+	// Here are the extrinsics in our block.
+	// You can add or remove these based on the modules and calls you have set up.
+	let block_1 = types::Block {
+		header: support::Header { block_number: 1 },
+		extrinsics: vec![
+			support::Extrinsic {
+				caller: alice.clone(),
+				call: RuntimeCall::BalancesTransfer { to: bob, amount: 30 },
+			},
+			support::Extrinsic {
+				caller: alice,
+				call: RuntimeCall::BalancesTransfer { to: charlie, amount: 20 },
+			},
+		],
+	};
 
-	/*
-		TODO:
-		Use your `runtime` to call the `execute_block` function with your new block.
-		If the `execute_block` function returns an error, you should panic!
-		We `expect` that all the blocks being executed must be valid.
-	*/
+	// Execute the extrinsics which make up our block.
+	// If there are any errors, our system panics, since we should not execute invalid blocks.
+	runtime.execute_block(block_1).expect("invalid block");
 
 	// Simply print the debug format of our runtime state.
 	println!("{runtime:#?}");
