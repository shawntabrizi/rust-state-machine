diff --git a/src/main.rs b/src/main.rs
index 38c06781..d70bff55 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -2,6 +2,8 @@ mod balances;
 mod support;
 mod system;
 
+/* TODO: Import `crate::support::Dispatch` so that you can access the `dispatch` function. */
+
 // These are the concrete types we will use in our simple state machine.
 // Modules are configured for these types directly, and they satisfy all of our
 // trait requirements.
@@ -44,6 +46,40 @@ impl Runtime {
 	fn new() -> Self {
 		Self { system: system::Pallet::new(), balances: balances::Pallet::new() }
 	}
+
+	// Execute a block of extrinsics. Increments the block number.
+	fn execute_block(&mut self, block: types::Block) -> support::DispatchResult {
+		/* TODO:
+			- Increment the system's block number.
+			- Check that the block number of the incoming block matches the current block number,
+			  or return an error.
+			- Iterate over the extrinsics in the block...
+				- Increment the nonce of the caller.
+				- Dispatch the extrinsic using the `caller` and the `call` contained in the extrinsic.
+				- Handle errors from `dispatch` same as we did for individual calls: printing any
+				  error and capturing the result.
+				- You can extend the error message to include information like the block number and
+				  extrinsic number.
+		*/
+		Ok(())
+	}
+}
+
+impl crate::support::Dispatch for Runtime {
+	type Caller = <Runtime as system::Config>::AccountId;
+	type Call = RuntimeCall;
+	// Dispatch a call on behalf of a caller. Increments the caller's nonce.
+	//
+	// Dispatch allows us to identify which underlying module call we want to execute.
+	// Note that we extract the `caller` from the extrinsic, and use that information
+	// to determine who we are executing the call on behalf of.
+	fn dispatch(
+		&mut self,
+		caller: Self::Caller,
+		runtime_call: Self::Call,
+	) -> support::DispatchResult {
+		unimplemented!();
+	}
 }
 
 fn main() {
