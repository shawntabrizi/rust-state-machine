diff --git a/src/main.rs b/src/main.rs
index 6c117f65..8554121f 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -16,22 +16,22 @@ impl Runtime {
 }
 
 fn main() {
-	/* TODO: Create a mutable variable `runtime`, which is a new instance of `Runtime`. */
-	/* TODO: Set the balance of `alice` to 100, allowing us to execute other transactions. */
+	let mut runtime = Runtime::new();
+	let alice = "alice".to_string();
+	let bob = "bob".to_string();
+	let charlie = "charlie".to_string();
+
+	runtime.balances.set_balance(&alice, 100);
 
 	// start emulating a block
-	/* TODO: Increment the block number in system. */
-	/* TODO: Assert the block number is what we expect. */
+	runtime.system.inc_block_number();
+	assert_eq!(runtime.system.block_number(), 1);
 
 	// first transaction
-	/* TODO: Increment the nonce of `alice`. */
-	/* TODO: Execute a transfer from `alice` to `bob` for 30 tokens.
-		- The transfer _could_ return an error. We should use `map_err` to print
-		  the error if there is one.
-		- We should capture the result of the transfer in an unused variable like `_res`.
-	*/
+	runtime.system.inc_nonce(&alice);
+	let _res = runtime.balances.transfer(alice.clone(), bob, 30).map_err(|e| eprintln!("{e}"));
 
 	// second transaction
-	/* TODO: Increment the nonce of `alice` again. */
-	/* TODO: Execute another balance transfer, this time from `alice` to `charlie` for 20. */
+	runtime.system.inc_nonce(&alice);
+	let _res = runtime.balances.transfer(alice, charlie, 20).map_err(|e| eprintln!("{e}"));
 }
