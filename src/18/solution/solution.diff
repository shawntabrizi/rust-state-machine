diff --git a/src/balances.rs b/src/balances.rs
index a5d63fe..e333e0d 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -1,38 +1,20 @@
-/* TODO: You might need to import some stuff for this step. */
+use num::traits::{CheckedAdd, CheckedSub, Zero};
 use std::collections::BTreeMap;
 
-type AccountId = String;
-type Balance = u128;
-
-/*
-	TODO:
-	Update the `Pallet` struct to be generic over the `AccountId` and `Balance` type.
-
-	You won't need the type definitions above after you are done.
-	Types will now be defined in `main.rs`. See the TODOs there.
-*/
-
 /// This is the Balances Module.
 /// It is a simple module which keeps track of how much balance each account has in this state
 /// machine.
 #[derive(Debug)]
-pub struct Pallet {
+pub struct Pallet<AccountId, Balance> {
 	// A simple storage mapping from accounts to their balances.
 	balances: BTreeMap<AccountId, Balance>,
 }
 
-/*
-	TODO:
-	The generic types need to satisfy certain traits in order to be used in the functions below.
-		- AccountId: Ord + Clone
-		- Balance: Zero + CheckedSub + CheckedAdd + Copy
-
-	You could figure these traits out yourself by letting the compiler tell you what you're missing.
-
-	NOTE: You might need to adjust some of the functions below to satisfy the borrow checker.
-*/
-
-impl Pallet {
+impl<AccountId, Balance> Pallet<AccountId, Balance>
+where
+	AccountId: Ord + Clone,
+	Balance: Zero + CheckedSub + CheckedAdd + Copy,
+{
 	/// Create a new instance of the balances module.
 	pub fn new() -> Self {
 		Self { balances: BTreeMap::new() }
@@ -46,7 +28,7 @@ impl Pallet {
 	/// Get the balance of an account `who`.
 	/// If the account has no stored balance, we return zero.
 	pub fn balance(&self, who: &AccountId) -> Balance {
-		*self.balances.get(who).unwrap_or(&0)
+		*self.balances.get(who).unwrap_or(&Balance::zero())
 	}
 
 	/// Transfer `amount` from one account to another.
@@ -61,8 +43,8 @@ impl Pallet {
 		let caller_balance = self.balance(&caller);
 		let to_balance = self.balance(&to);
 
-		let new_caller_balance = caller_balance.checked_sub(amount).ok_or("Not enough funds.")?;
-		let new_to_balance = to_balance.checked_add(amount).ok_or("Overflow")?;
+		let new_caller_balance = caller_balance.checked_sub(&amount).ok_or("Not enough funds.")?;
+		let new_to_balance = to_balance.checked_add(&amount).ok_or("Overflow")?;
 
 		self.balances.insert(caller, new_caller_balance);
 		self.balances.insert(to, new_to_balance);
@@ -75,11 +57,7 @@ impl Pallet {
 mod tests {
 	#[test]
 	fn init_balances() {
-		/*
-			TODO:
-			When creating an instance of `Pallet`, you should explicitly define the types you use.
-		*/
-		let mut balances = super::Pallet::new();
+		let mut balances = super::Pallet::<String, u128>::new();
 
 		assert_eq!(balances.balance(&"alice".to_string()), 0);
 		balances.set_balance(&"alice".to_string(), 100);
@@ -89,11 +67,7 @@ mod tests {
 
 	#[test]
 	fn transfer_balance() {
-		/*
-			TODO:
-			When creating an instance of `Pallet`, you should explicitly define the types you use.
-		*/
-		let mut balances = super::Pallet::new();
+		let mut balances = super::Pallet::<String, u128>::new();
 
 		assert_eq!(
 			balances.transfer("alice".to_string(), "bob".to_string(), 51),
diff --git a/src/main.rs b/src/main.rs
index 43d1d49..757c65a 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -5,9 +5,8 @@ mod system;
 // Modules are configured for these types directly, and they satisfy all of our
 // trait requirements.
 mod types {
-	/*
-		TODO: Move your type definitions for `AccountId` and `Balance` here.
-	*/
+	pub type AccountId = String;
+	pub type Balance = u128;
 }
 
 // This is our main Runtime.
@@ -15,8 +14,7 @@ mod types {
 #[derive(Debug)]
 pub struct Runtime {
 	system: system::Pallet,
-	/* TODO: Use your type definitions for your new generic `balances::Pallet`. */
-	balances: balances::Pallet,
+	balances: balances::Pallet<types::AccountId, types::Balance>,
 }
 
 impl Runtime {
