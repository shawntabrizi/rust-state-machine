diff --git a/src/proof_of_existence.rs b/src/proof_of_existence.rs
index 5e7de2a..7e56025 100644
--- a/src/proof_of_existence.rs
+++ b/src/proof_of_existence.rs
@@ -1,3 +1,4 @@
+use crate::support::DispatchResult;
 use core::fmt::Debug;
 use std::collections::BTreeMap;
 
@@ -22,4 +23,54 @@ impl<T: Config> Pallet<T> {
 	pub fn new() -> Self {
 		Self { claims: BTreeMap::new() }
 	}
+
+	/// Get the owner (if any) of a claim.
+	pub fn get_claim(&self, claim: &T::Content) -> Option<&T::AccountId> {
+		/* TODO: `get` the `claim` */
+		unimplemented!()
+	}
+
+	/// Create a new claim on behalf of the `caller`.
+	/// This function will return an error if someone already has claimed that content.
+	pub fn create_claim(&mut self, caller: T::AccountId, claim: T::Content) -> DispatchResult {
+		/* TODO: Check that a `claim` does not already exist. If so, return an error. */
+		/* TODO: `insert` the claim on behalf of `caller`. */
+		Ok(())
+	}
+
+	/// Revoke an existing claim on some content.
+	/// This function should only succeed if the caller is the owner of an existing claim.
+	/// It will return an error if the claim does not exist, or if the caller is not the owner.
+	pub fn revoke_claim(&mut self, caller: T::AccountId, claim: T::Content) -> DispatchResult {
+		/* TODO: Get the owner of the `claim` to be revoked. */
+		/* TODO: Check that the `owner` matches the `caller`. */
+		/* TODO: If all checks pass, then `remove` the `claim`. */
+		Ok(())
+	}
+}
+
+#[cfg(test)]
+mod test {
+	struct TestConfig;
+
+	impl super::Config for TestConfig {
+		type Content = String;
+	}
+
+	impl crate::system::Config for TestConfig {
+		type AccountId = String;
+		type BlockNumber = u32;
+		type Nonce = u32;
+	}
+
+	#[test]
+	fn basic_proof_of_existence() {
+		/*
+			TODO:
+			Create an end to end test verifying the basic functionality of this pallet.
+				- Check the initial state is as you expect.
+				- Check that all functions work successfully.
+				- Check that all error conditions error as expected.
+		*/
+	}
 }
