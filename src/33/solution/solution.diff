diff --git a/src/proof_of_existence.rs b/src/proof_of_existence.rs
index 7e56025c..16f19560 100644
--- a/src/proof_of_existence.rs
+++ b/src/proof_of_existence.rs
@@ -26,15 +26,16 @@ impl<T: Config> Pallet<T> {
 
 	/// Get the owner (if any) of a claim.
 	pub fn get_claim(&self, claim: &T::Content) -> Option<&T::AccountId> {
-		/* TODO: `get` the `claim` */
-		unimplemented!()
+		self.claims.get(claim)
 	}
 
 	/// Create a new claim on behalf of the `caller`.
 	/// This function will return an error if someone already has claimed that content.
 	pub fn create_claim(&mut self, caller: T::AccountId, claim: T::Content) -> DispatchResult {
-		/* TODO: Check that a `claim` does not already exist. If so, return an error. */
-		/* TODO: `insert` the claim on behalf of `caller`. */
+		if self.claims.contains_key(&claim) {
+			return Err("this content is already claimed");
+		}
+		self.claims.insert(claim, caller);
 		Ok(())
 	}
 
@@ -42,9 +43,11 @@ impl<T: Config> Pallet<T> {
 	/// This function should only succeed if the caller is the owner of an existing claim.
 	/// It will return an error if the claim does not exist, or if the caller is not the owner.
 	pub fn revoke_claim(&mut self, caller: T::AccountId, claim: T::Content) -> DispatchResult {
-		/* TODO: Get the owner of the `claim` to be revoked. */
-		/* TODO: Check that the `owner` matches the `caller`. */
-		/* TODO: If all checks pass, then `remove` the `claim`. */
+		let owner = self.get_claim(&claim).ok_or("claim does not exist")?;
+		if caller != *owner {
+			return Err("this content is owned by someone else");
+		}
+		self.claims.remove(&claim);
 		Ok(())
 	}
 }
@@ -65,12 +68,15 @@ mod test {
 
 	#[test]
 	fn basic_proof_of_existence() {
-		/*
-			TODO:
-			Create an end to end test verifying the basic functionality of this pallet.
-				- Check the initial state is as you expect.
-				- Check that all functions work successfully.
-				- Check that all error conditions error as expected.
-		*/
+		let mut poe = super::Pallet::<TestConfig>::new();
+		assert_eq!(poe.get_claim(&"Hello, world!".to_string()), None);
+		assert_eq!(poe.create_claim("alice".to_string(), "Hello, world!".to_string()), Ok(()));
+		assert_eq!(poe.get_claim(&"Hello, world!".to_string()), Some(&"alice".to_string()));
+		assert_eq!(
+			poe.create_claim("bob".to_string(), "Hello, world!".to_string()),
+			Err("this content is already claimed")
+		);
+		assert_eq!(poe.revoke_claim("alice".to_string(), "Hello, world!".to_string()), Ok(()));
+		assert_eq!(poe.create_claim("bob".to_string(), "Hello, world!".to_string()), Ok(()));
 	}
 }
