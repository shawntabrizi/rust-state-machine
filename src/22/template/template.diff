diff --git a/src/balances.rs b/src/balances.rs
index 43b4926..25256ba 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -3,6 +3,11 @@ use std::collections::BTreeMap;
 
 /// The configuration trait for the Balances Module.
 /// Contains the basic types needed for handling balances.
+/*
+	TODO:
+	Tightly couple balances to the system pallet by inheriting the `system::Config` trait.
+	After this, you won't need the `AccountId` type redefined here.
+*/
 pub trait Config {
 	/// A type which can identify an account in our state machine.
 	/// On a real blockchain, you would want this to be a cryptographic public key.
@@ -63,6 +68,9 @@ impl<T: Config> Pallet<T> {
 #[cfg(test)]
 mod tests {
 	struct TestConfig;
+
+	/* TODO: Implement `crate::system::Config` for `TestConfig` to make your tests work again. */
+
 	impl super::Config for TestConfig {
 		type AccountId = String;
 		type Balance = u128;
diff --git a/src/main.rs b/src/main.rs
index 34ff5bf..dc034b9 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -26,6 +26,7 @@ impl system::Config for Runtime {
 }
 
 impl balances::Config for Runtime {
+	/* TODO: After inheriting from the `system::Config` trait, you won't need `AccountId` here. */
 	type AccountId = types::AccountId;
 	type Balance = types::Balance;
 }
